let wasmModule = null;

export const llama = {
    async create(config) {
        console.log('Creating LLAMA instance with config:', config);
        
        if (!wasmModule) {
            try {
                // Load WASM binary
                const wasmResponse = await fetch('/assets/js/llm/llama.wasm');
                const wasmBinary = await wasmResponse.arrayBuffer();
                
                // Initialize WASM module
                wasmModule = await WebAssembly.instantiate(wasmBinary, {
                    env: {
                        memory: new WebAssembly.Memory({ initial: 256 }),
                        abort: () => console.error('WASM aborted')
                    }
                });
                
                console.log('WASM module loaded successfully');
            } catch (error) {
                console.error('Error loading WASM module:', error);
                throw error;
            }
        }
        
        return {
            async generate({ prompt, maxTokens, temperature, topP, stopSequences }) {
                try {
                    // Call WASM functions for text generation
                    const result = await wasmModule.instance.exports.generate(
                        prompt,
                        maxTokens,
                        temperature,
                        topP
                    );
                    
                    return {
                        text: result,
                        promptTokens: prompt.length,
                        completionTokens: result.length,
                        totalTokens: prompt.length + result.length
                    };
                } catch (error) {
                    console.error('Error in text generation:', error);
                    throw error;
                }
            },
            
            async dispose() {
                if (wasmModule) {
                    wasmModule = null;
                }
            }
        };
    }
};
